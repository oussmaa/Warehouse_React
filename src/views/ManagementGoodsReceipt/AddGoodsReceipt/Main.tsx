import DarkModeSwitcher from "@/components/dark-mode-switcher/Main";
import React, { useState, useEffect } from "react";
import apiService from "@/Service/ApiService";
import ApiUrls from "@/API/apiUrls";
import { useNavigate } from "react-router-dom";
import { Alert } from "@/base-components";
import GoodsReceipt from "../../../Entity/GoodsReceipt";
import OrderStock from "../../../Entity/OrderStock";
 

function Main() {
  const [description, setDescription] = useState("");
  const [goodsReceiptId, setGoodsReceiptId] = useState<number | "">("");
  const [orderStockId, setOrderStockId] = useState<number | "">("");
  const [goodsReceipt, setGoodsReceipt] = useState<GoodsReceipt[]>([]);
  const [orderStocks, setOrderStocks] = useState<OrderStock[]>([]);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
 
    
    const fetchOrderStocks = async () => {
      try {
        const fetchedOrderStocks: OrderStock[] = await apiService.GetListOrderStock(ApiUrls.ORDERSTOCK);
        setOrderStocks(fetchedOrderStocks);
      } catch (error) {
        console.error("Error fetching order stocks:", error);
      }
    };

     fetchOrderStocks();
  }, []);

  const validateInput = () => {
    if (description.trim() === "") {
      return "Description is required";
    }

    if (orderStockId === "" || isNaN(Number(orderStockId))) {
      return "Valid Order Stock ID is required";
    }

    return null;
  };

  const handleAddGoodsReceipt = async () => {
    const validationError = validateInput();

    if (validationError) {
      setAlertMessage(validationError);
      setShowAlert(true);
      setTimeout(() => setShowAlert(false), 20000); // 3-second delay
      return;
    }

    try {
      const newGoodsReceipt = {
        id: 0, // Assuming the ID will be generated by the backend
        description,
        orderStockId: orderStockId as number,
      };

      await apiService.AddGoodsReceipt(ApiUrls.GOODSRECEIPT, newGoodsReceipt);
      navigate("/dashboard/listgoodsreceipt");
    } catch (error) {
      console.error("Error adding goods receipt:", error);
    }
  };

  return (
    <>
      <div>
        <DarkModeSwitcher />
        <form>
          <Alert
            show={showAlert}
            className="alert-danger"
            onHidden={() => setShowAlert(false)}
          >
            {alertMessage}
          </Alert>
          <div className="space-y-12">
            <div className="border-b border-gray-900/10 pb-12">
              <h2 className="text-base font-semibold leading-7 text-gray-900">
                Goods Receipt Information
              </h2>

              <div className="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                <div className="sm:col-span-3">
                  <label
                    htmlFor="description"
                    className="block text-sm font-medium leading-6 text-gray-900"
                  >
                    Description
                  </label>
                  <div className="mt-2">
                    <input
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                      type="text"
                      id="description"
                      className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    />
                  </div>
                </div>

                <div className="sm:col-span-3">
                  <label
                    htmlFor="order-stock-id"
                    className="block text-sm font-medium leading-6 text-gray-900"
                  >
                    Order Stock ID
                  </label>
                  <div className="mt-2">
                    <select
                      value={orderStockId}
                      onChange={(e) => setOrderStockId(Number(e.target.value))}
                      id="order-stock-id"
                      className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    >
                      <option value="">Select an order stock</option>
                       {orderStocks.map((order) => (
                        <option key={order.id} value={order.id}>
                          {order.description}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>

        <div className="mt-6 flex items-center justify-end gap-x-6">
          <button
            type="button"
            className="text-sm font-semibold leading-6 text-gray-900"
            onClick={() => navigate("/dashboard")}
          >
            Cancel
          </button>
          <button
            className="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            onClick={handleAddGoodsReceipt}
          >
            Save
          </button>
        </div>
      </div>
    </>
  );
}

export default Main;
